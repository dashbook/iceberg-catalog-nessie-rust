/*
 * Nessie API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.65.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Transplant1 {
    #[serde(rename = "fromRefName")]
    pub from_ref_name: String,
    #[serde(rename = "hashesToTransplant")]
    pub hashes_to_transplant: Vec<String>,
    #[serde(rename = "keyMergeModes", skip_serializing_if = "Option::is_none")]
    pub key_merge_modes: Option<Vec<crate::models::MergeKeyBehavior>>,
    #[serde(rename = "defaultKeyMergeMode", skip_serializing_if = "Option::is_none")]
    pub default_key_merge_mode: Option<crate::models::MergeBehavior>,
    #[serde(rename = "dryRun", skip_serializing_if = "Option::is_none")]
    pub dry_run: Option<bool>,
    #[serde(rename = "fetchAdditionalInfo", skip_serializing_if = "Option::is_none")]
    pub fetch_additional_info: Option<bool>,
    #[serde(rename = "returnConflictAsResult", skip_serializing_if = "Option::is_none")]
    pub return_conflict_as_result: Option<bool>,
}

impl Transplant1 {
    pub fn new(from_ref_name: String, hashes_to_transplant: Vec<String>) -> Transplant1 {
        Transplant1 {
            from_ref_name,
            hashes_to_transplant,
            key_merge_modes: None,
            default_key_merge_mode: None,
            dry_run: None,
            fetch_additional_info: None,
            return_conflict_as_result: None,
        }
    }
}


