/*
 * Nessie API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.65.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Merge {
    /// Optional commit message for this merge request  If not set, the server will generate a commit message automatically using metadata from the  merged commits.
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// The hash of the last commit to merge.  This commit must be present in the history on 'fromRefName' before the first common parent with respect to the target branch.
    #[serde(rename = "fromHash")]
    pub from_hash: String,
    /// The name of the reference that contains the 'source' commits for the requested merge or transplant operation. 
    #[serde(rename = "fromRefName")]
    pub from_ref_name: String,
    /// Specific merge behaviour requests by content key.  The default is set by the `defaultKeyMergeMode` parameter. 
    #[serde(rename = "keyMergeModes", skip_serializing_if = "Option::is_none")]
    pub key_merge_modes: Option<Vec<crate::models::MergeKeyBehavior>>,
    #[serde(rename = "defaultKeyMergeMode", skip_serializing_if = "Option::is_none")]
    pub default_key_merge_mode: Option<crate::models::MergeBehavior>,
    /// When set to 'true' instructs the server to validate the request but to avoid committing any changes. 
    #[serde(rename = "dryRun", skip_serializing_if = "Option::is_none")]
    pub dry_run: Option<bool>,
    /// Whether to provide optional response data. 
    #[serde(rename = "fetchAdditionalInfo", skip_serializing_if = "Option::is_none")]
    pub fetch_additional_info: Option<bool>,
    /// When set to 'true' instructs the server to produce normal (non-error) responses in case a conflict is detected and report conflict details in the response payload.
    #[serde(rename = "returnConflictAsResult", skip_serializing_if = "Option::is_none")]
    pub return_conflict_as_result: Option<bool>,
    #[serde(rename = "commitMeta", skip_serializing_if = "Option::is_none")]
    pub commit_meta: Option<Box<crate::models::CommitMeta>>,
}

impl Merge {
    pub fn new(from_hash: String, from_ref_name: String) -> Merge {
        Merge {
            message: None,
            from_hash,
            from_ref_name,
            key_merge_modes: None,
            default_key_merge_mode: None,
            dry_run: None,
            fetch_additional_info: None,
            return_conflict_as_result: None,
            commit_meta: None,
        }
    }
}


